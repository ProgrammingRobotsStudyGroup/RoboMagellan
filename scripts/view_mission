#! /usr/bin/env python

from __future__ import print_function
import numpy as np
from math import sin, cos, pi
import rospy
import tf
from tf.transformations import quaternion_from_euler, euler_from_quaternion
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Pose, PoseStamped
from nav_msgs.msg import Odometry
from sensor_msgs.msg import NavSatFix
from mavros_msgs.msg import Waypoint, WaypointList
from mavros_msgs.srv import WaypointPush, WaypointPull, WaypointClear, WaypointSetCurrent
import utm

class ShowMarkers:

    def run(self):
        self.gps_position = None
        self.xyz_position = None
        self.utm_tf = None

        rospy.init_node("show_markers")
        rospy.Subscriber('/mavros/global_position/global',
                         NavSatFix, self.on_gps_position)
        rospy.Subscriber('/mavros/local_position/pose',
                         PoseStamped, self.on_xyz_position)
        rospy.Subscriber('/mavros/mission/waypoints', WaypointList,
                         self.on_waypoints_changed)
        self.pub = rospy.Publisher('/visualization_marker_array', MarkerArray,
                                   queue_size=1)

        rospy.wait_for_service('/mavros/mission/pull')
        self.svc_pull_waypoints = rospy.ServiceProxy('/mavros/mission/pull', WaypointPull)

        # Update waypoints once ever second, if no change, in case
        # rviz is restarted.
        rate = rospy.Rate(0.5)
        while not rospy.is_shutdown():
            self.svc_pull_waypoints()
            rate.sleep()

    def on_gps_position(self, position):
        first_time = (self.gps_position is None)
        #rospy.loginfo('Got GPS position, first_time:' + str(first_time))
        self.gps_position = (position.latitude, position.longitude)
        if first_time and (self.xyz_position is not None):
            self.set_utm_transform()

    def on_xyz_position(self, position):
        first_time = (self.xyz_position is None)
        #rospy.loginfo('Got xyx position, first_time:' + str(first_time))
        self.xyz_position = position.pose
        self.show_robot()
        if first_time and (self.gps_position is not None):
            self.set_utm_transform()

    def on_waypoints_changed(self, list):
        if self.utm_tf is None:
            rospy.loginfo('No UTM transformation')
            return
        #else:
        #    rospy.loginfo('Showing waypoints')
        markers = []
        # Show up to 100 waypoints.
        for i in range(100):
            # If fewer waypoints, make sure we delete any extras from
            # prior waypoint lists.
            if i >= len(list.waypoints):
                marker = Marker()
                marker.id = i
                marker.action = Marker.DELETE
                markers.append(marker)
                continue
            
            wp = list.waypoints[i]
            utm_x, utm_y, zone, band = utm.from_latlon(wp.x_lat, wp.y_long)
            p_utm = np.array([utm_x, utm_y, 0, 1])
            p_cart = np.matmul(self.utm_tf, p_utm)
            #rospy.loginfo('GPS position: ' + str(wp.x_lat)
            #              + ', ' + str(wp.y_long))
            #rospy.loginfo('p_utm:' + str(p_utm))
            #rospy.loginfo('p_cart:' + str(p_cart))
            x = p_cart[0]
            y = p_cart[1]
            h = 0.05
            w = 0.5
            if list.current_seq == i:
                color = (1, 0, 0)
            elif wp.z_alt >= 1900:
                color = (1, 0.5, 0)
            elif wp.z_alt >= 900:
                color = (1, 0, 1)
            else:
                color = (0, 1, 0)
            marker = self.create_marker(i, Marker.CYLINDER, x, y, h/2,
                                        w, w, h, 0,
                                        r=color[0], g=color[1], b=color[2],
                                        ns='waypoints')
            markers.append(marker)
        msg = MarkerArray()
        msg.markers = markers
        self.pub.publish(msg)
            
    def set_utm_transform(self):
        rospy.loginfo('Setting UTM transform')
        rospy.loginfo('GPS position: ' + str(self.gps_position[0])
                      + ', ' + str(self.gps_position[1]))
        utm_x, utm_y, zone, band = utm.from_latlon(self.gps_position[0],
                                                   self.gps_position[1])
        
        self.utm_tf = np.eye(4, dtype=np.float32)
        # We only need X,Y transform, we ignore Z.
        self.utm_tf[0,3] = self.xyz_position.position.x - utm_x
        self.utm_tf[1,3] = self.xyz_position.position.y - utm_y
        rospy.loginfo('self.utm_position:' + str((utm_x, utm_y)))
        rospy.loginfo('self.xyz_position:' + str(self.xyz_position))
        rospy.loginfo('self.utm_tf:' + str(self.utm_tf))

    def show_robot(self):
        x = self.xyz_position.position.x
        y = self.xyz_position.position.y
        quaternion = [self.xyz_position.orientation.x, \
                      self.xyz_position.orientation.y, \
                      self.xyz_position.orientation.z, \
                      self.xyz_position.orientation.w]
        roll, pitch, yaw = euler_from_quaternion(quaternion)
        rover = self.create_marker(1, Marker.CUBE, x, y, 0.350,
                                   0.680, 0.540, 0.05,
                                   yaw, r=1, g=1, ns='robot')
        arrow = self.create_marker(2, Marker.ARROW, x, y, 0.350,
                                   1.0, 0.3, 0.3,
                                   yaw, r=1, g=0.5, ns='robot')
        msg = MarkerArray()
        msg.markers = [rover, arrow]
        self.pub.publish(msg)

    def create_marker(self, id, type, x, y, z, l=0.5, w=0.5, h=0.01,
                      angle=0, ns='waypoints', r=1, b=0, g=0, a=1, text='',
                      action=0):
        marker = Marker()
        marker.header.frame_id = 'map'
        marker.ns = ns
        marker.id = id
        marker.type = type
        marker.action = action
        marker.pose.position.x = x
        marker.pose.position.y = y
        marker.pose.position.z = z
        quaternion = quaternion_from_euler(0, 0, angle)
        marker.pose.orientation.x = quaternion[0]
        marker.pose.orientation.y = quaternion[1]
        marker.pose.orientation.z = quaternion[2]
        marker.pose.orientation.w = quaternion[3]
        marker.scale.x = l
        marker.scale.y = w
        marker.scale.z = h
        marker.color.r = r
        marker.color.g = g
        marker.color.b = b
        marker.color.a = a
        marker.text = text
        return marker

if __name__ == "__main__":
    try:
        ShowMarkers().run()

    except rospy.ROSInterruptException:
        pass
