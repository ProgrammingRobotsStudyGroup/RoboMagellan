#! /usr/bin/env python

import rospy
import tf
import tf2_ros
from mavros_msgs.msg import WaypointList
from geodesy.utm import fromLatLong
from robo_magellan.msg import LocalWaypointList as LocalWaypointList
from robo_magellan.msg import LocalWaypoint as LocalWaypoint

class MavrosTopics:
    MISSION_WAYPOINTS = '/mavros/mission/waypoints'

class WaypointTransformer:

    def run(self):
        rospy.init_node("waypoint_transformer")

        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

        # Sleep for a bit so that we (likely) get a valid transform.
        rospy.sleep(rospy.Duration(1))

        rospy.Subscriber(MavrosTopics.MISSION_WAYPOINTS, WaypointList,
                         self.on_waypoints_changed)
        self.waypoint_pub = rospy.Publisher('~/waypoints/local',
                                            LocalWaypointList, queue_size=1,
                                            latch=True)

        rospy.spin()

    def on_waypoints_changed(self, list):
        try:
            t = self.tf_buffer.lookup_transform('utm', 'map', rospy.Time(0))
        except tf2_ros.LookupException as err:
            rospy.logerr('Error getting UTM to map transform: {0}'.format(err))
            return
        except tf2_ros.ConnectivityException as err:
            rospy.logerr('Error getting UTM to map transform: {0}'.format(err))
            return
        except tf2_ros.ExtrapolationException as err:
            rospy.logerr('Error getting UTM to map transform: {0}'.format(err))
            return

        local_waypoints = LocalWaypointList()
        local_waypoints.current_seq = list.current_seq
        local_waypoints.waypoints = []

        for wp in list.waypoints:
            utm = fromLatLong(wp.x_lat, wp.y_long)
            local_wp = LocalWaypoint()
            local_wp.point.x = utm.easting + t.transform.translation.x
            local_wp.point.y = utm.northing + t.transform.translation.y
            # Copy the altitude unchanged.
            local_wp.point.z = wp.z_alt

            local_waypoints.waypoints.append(local_wp)

        self.waypoint_pub.publish(local_waypoints)
            
if __name__ == "__main__":
    try:
        WaypointTransformer().run()

    except rospy.ROSInterruptException:
        pass
