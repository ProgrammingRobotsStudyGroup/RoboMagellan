#! /usr/bin/env python

"""Listens for waypoints and republishes waypoints in map coordinates."""

import rospy
import tf
import tf2_ros
from geographic_msgs.msg import GeoPoint
from mavros_msgs.msg import WaypointList, Waypoint, CommandCode
from mavros_msgs.srv import WaypointPull, WaypointPush
from geodesy.utm import UTMPoint, fromLatLong
from robo_magellan.msg import LocalWaypointList as LocalWaypointList
from robo_magellan.msg import LocalWaypoint as LocalWaypoint

class Topics:
    MISSION_WAYPOINTS = '/mavros/mission/waypoints'
    PULL_WAYPOINTS = '/mavros/mission/pull'
    PUSH_WAYPOINTS = '/mavros/mission/push'
    LOCAL_WAYPOINTS = '~waypoints/local'
    UPDATE_LOCAL_WAYPOINTS = '~waypoints/update'

class WaypointTransformer:

    def run(self):
        rospy.init_node('waypoint_transformer')

        self.zone = None
        self.band = None

        rate = rospy.Rate(rospy.get_param('~rate', 1.0))

        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

        # Sleep for a bit so that we (likely) get a valid transform.
        rospy.sleep(rospy.Duration(1))

        self.waypoint_pub = rospy.Publisher(Topics.LOCAL_WAYPOINTS,
                                            LocalWaypointList, queue_size=1,
                                            latch=True)

        rospy.Subscriber(Topics.MISSION_WAYPOINTS, WaypointList,
                         self.on_waypoints_changed)
        rospy.Subscriber(Topics.UPDATE_LOCAL_WAYPOINTS, LocalWaypointList,
                         self.on_local_waypoints_updated)

        rospy.wait_for_service(Topics.PULL_WAYPOINTS)
        self._mavros_pull_waypoints = rospy.ServiceProxy(Topics.PULL_WAYPOINTS,
                                                         WaypointPull)

        rospy.wait_for_service(Topics.PUSH_WAYPOINTS)
        self._mavros_push_waypoints = rospy.ServiceProxy(Topics.PUSH_WAYPOINTS,
                                                         WaypointPush)

        self.waypoint_list = None

        while not rospy.is_shutdown():
            rate.sleep()
            try:
                t = self.tf_buffer.lookup_transform('utm', 'map', rospy.Time(0))
            except (tf2_ros.LookupException, tf2_ros.ConnectivityException,
                    tf2_ros.ExtrapolationException):
                rospy.loginfo('No UTM transform - cannot publish waypoints')
                continue

            if self.waypoint_list is None:
                rospy.loginfo('No waypoints from mavros')
                self._mavros_pull_waypoints()
            else:
                self.publish_waypoints(t)

    def on_waypoints_changed(self, list):
        self.waypoint_list = list

    def on_local_waypoints_updated(self, list):
        try:
            t = self.tf_buffer.lookup_transform('utm', 'map', rospy.Time(0))
        except (tf2_ros.LookupException, tf2_ros.ConnectivityException,
                tf2_ros.ExtrapolationException):
            rospy.loginfo('No UTM transform - cannot update waypoints')
            return

        new_waypoints = []

        for wp in list.waypoints:
            utm = UTMPoint(wp.point.x - t.transform.translation.x,
                           wp.point.y - t.transform.translation.y,
                           zone=self.zone, band=self.band)
            geo_point = utm.toMsg()

            new_wp = Waypoint()
            new_wp.command = CommandCode.NAV_WAYPOINT
            new_wp.autocontinue = True
            new_wp.x_lat = geo_point.latitude
            new_wp.y_long = geo_point.longitude
            new_wp.z_alt = wp.point.z
            new_waypoints.append(new_wp)

        # Must use a start index of zero or Ardupilot won't accept the
        # waypoint push.
        self._mavros_push_waypoints(0, new_waypoints)
        rospy.loginfo('Published %d waypoints', len(new_waypoints))

    def publish_waypoints(self, t):
        local_waypoints = LocalWaypointList()
        local_waypoints.current_seq = self.waypoint_list.current_seq
        local_waypoints.waypoints = []

        for wp in self.waypoint_list.waypoints:
            utm = fromLatLong(wp.x_lat, wp.y_long)

            # Set zone and band for current location, if not set.
            if self.zone is None:
                self.zone = utm.zone
                self.band = utm.band

            local_wp = LocalWaypoint()
            local_wp.point.x = utm.easting + t.transform.translation.x
            local_wp.point.y = utm.northing + t.transform.translation.y
            # Copy the altitude unchanged.
            local_wp.point.z = wp.z_alt

            local_waypoints.waypoints.append(local_wp)

        self.waypoint_pub.publish(local_waypoints)
            
if __name__ == "__main__":
    try:
        WaypointTransformer().run()

    except rospy.ROSInterruptException:
        pass
